import oracledb
import pandas as pd
from concurrent.futures import ThreadPoolExecutor, as_completed

def find_high_freq_ids_oracle(
    user: str,
    password: str,
    dsn: str,
    table: str,
    id_col: str = "ID",
    year_col: str = "YEAR",
    qtr_col: str = "QTR",
    min_count: int = 15,
    start_year: int = 2020,
    end_year: int = 2024,
    quarters: list[int] = [1, 2, 3, 4],
    output_csv: str = "high_freq_ids.csv",
    max_workers: int = 4,
):
    params = [(y, q) for y in range(start_year, end_year + 1) for q in quarters]
    def _worker(year, qtr):
        conn = oracledb.connect(user=user, password=password, dsn=dsn)
        sql = f"""
            SELECT
                :year || 'Q' || :qtr AS yr_qtr,
                {id_col} AS id,
                COUNT(*) AS count
            FROM {table}
            WHERE {year_col} = :year
              AND {qtr_col} = :qtr
            GROUP BY {id_col}
            HAVING COUNT(*) >= :min_count
        """
        cur = conn.cursor()
        cur.execute(sql, {"year": year, "qtr": qtr, "min_count": min_count})
        rows = cur.fetchall()
        cur.close()
        conn.close()
        return pd.DataFrame(rows, columns=["yr_qtr", "id", "count"])
    dfs = []
    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        futures = {executor.submit(_worker, y, q): (y, q) for y, q in params}
        for fut in as_completed(futures):
            try:
                dfs.append(fut.result())
            except Exception as e:
                y, q = futures[fut]
                print(f"Failed for {y}Q{q}: {e}")
    out = pd.concat(dfs, ignore_index=True) if dfs else pd.DataFrame(columns=["yr_qtr","id","count"])
    out.to_csv(output_csv, index=False)
    return out

if __name__ == "__main__":
    df = find_high_freq_ids_oracle(
        user="MY_USER",
        password="MY_PASS",
        dsn="db.host.com:1521/ORCLPDB1",
        table="YOUR_TABLE",
        id_col="ID",
        year_col="YR",
        qtr_col="QTR",
        min_count=15,
        start_year=2020,
        end_year=2024,
        quarters=[1,2,3,4],
        output_csv="high_freq_ids.csv",
        max_workers=8,
    )
    print(df.head())
