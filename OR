import itertools, os, math
from concurrent.futures import ThreadPoolExecutor, as_completed
from tqdm import tqdm

def quarter_range(start_year, start_qtr, end_year, end_qtr):
    sy, sq, ey, eq = int(start_year), int(start_qtr), int(end_year), int(end_qtr)
    start_idx = (sy * 4) + (sq - 1)
    end_idx = (ey * 4) + (eq - 1)
    for idx in range(start_idx, end_idx + 1):
        y = idx // 4
        q = (idx % 4) + 1
        yield y, q

def Extract_QTR_safe(fips, year, quarter):
    try:
        df1, df_subset = Extract_QTR(fips, year, quarter)
        return {"ok": True, "fips": fips, "year": year, "qtr": quarter, "df1": df1, "subset": df_subset, "err": None}
    except Exception as e:
        return {"ok": False, "fips": fips, "year": year, "qtr": quarter, "df1": None, "subset": None, "err": repr(e)}

def run_multithread(start_year, start_qtr, end_year, end_qtr, max_workers=None):
    periods = list(quarter_range(start_year, start_qtr, end_year, end_qtr))
    jobs = [(f, y, q) for (y, q) in periods for f in fipslist]
    if max_workers is None:
        max_workers = max(4, min(32, (os.cpu_count() or 8) * 2))
    results = []
    with ThreadPoolExecutor(max_workers=max_workers) as ex:
        futs = [ex.submit(Extract_QTR_safe, f, y, q) for (f, y, q) in jobs]
        for fut in tqdm(as_completed(futs), total=len(futs)):
            results.append(fut.result())
    ok = [r for r in results if r["ok"]]
    errs = [r for r in results if not r["ok"]]
    if ok:
        all_df1 = pd.concat([r["df1"] for r in ok], ignore_index=True)
        all_subset = pd.concat([r["subset"] for r in ok], ignore_index=True)
    else:
        all_df1 = pd.DataFrame()
        all_subset = pd.DataFrame()
    if errs:
        err_df = pd.DataFrame([{"fips": r["fips"], "year": r["year"], "qtr": r["qtr"], "err": r["err"]} for r in errs])
    else:
        err_df = pd.DataFrame(columns=["fips","year","qtr","err"])
    return all_df1, all_subset, err_df

start_year = 2022
start_qtr = 3
end_year = 2023
end_qtr = 2
all_df1, all_subset, err_df = run_multithread(start_year, start_qtr, end_year, end_qtr, max_workers=12)
