# Updated function: returns a DataFrame where rows are unique NAICS codes (from levels 2â€“6)
# Columns are yr_qtr (e.g., 2020-1, 2020-2, ...) and values are proportions of total for that period

def process_year_qtr_distribution(year, quarter):
    try:
        all_dfs = [DOM(fips, year, quarter) for fips in FIPS]
        all_dfs = [df for df in all_dfs if df is not None and not df.empty]

        if not all_dfs:
            return None

        df = pd.concat(all_dfs, ignore_index=True)
        df['yr_qtr'] = f"{year}-{quarter}"

        result_frames = []

        for level in ['naics2', 'naics3', 'naics4', 'naics5', 'naics6']:
            temp = df[level].dropna().astype(str)
            counts = temp.value_counts(normalize=True).rename(f"{year}-{quarter}")
            counts.index.name = 'naics_code'
            counts = counts.reset_index().assign(level=level)
            result_frames.append(counts)

        return pd.concat(result_frames, ignore_index=True)

    except Exception as e:
        print(f"Error processing {year}-Q{quarter}: {e}")
        return None

# Multithreaded execution
def compute_all_naics_distributions():
    years = range(2020, 2025)
    quarters = range(1, 5)
    tasks = []

    with ThreadPoolExecutor() as executor:
        for year, quarter in product(years, quarters):
            tasks.append(executor.submit(process_year_qtr_distribution, year, quarter))

        results = [t.result() for t in tasks if t is not None]

    combined = pd.concat(results, ignore_index=True)
    pivoted = combined.pivot_table(index=['level', 'naics_code'], 
                                   columns=combined.columns[1], 
                                   values=combined.columns[0], 
                                   fill_value=0)
    return pivoted.sort_index()
