
import warnings; warnings.filterwarnings('ignore');import us
import polars as pl; import pandas as pd;import time;import numpy as np
import matplotlib.pyplot as plt;import seaborn as sns;import glob
import pyarrow.dataset as ds;import more_itertools ;from tqdm import tqdm
from sshfs import SSHFileSystem; import os; import csv; import oracledb

states = ['AL','AR','CT','FL','GA','IA','IL','IN','ID','KS','LA','MD','ME','MN','MT',
          'NE','NJ','NM','OH','OK','OR','PA','RI','SC','SD','WA','WI','WV','WY','TX','UT']

def abbr2fips(abbr):
    state = us.states.lookup(abbr)
    return state.fips

fipslist = [abbr2fips(abbr) for abbr in states]

lookup = {'11':'11:Agriculture','21':'21:Mining','22':'22:Utilities','23': '23:Construction','31-33':'31-33:Manufacturing',
    '42': '42:Wholesale Trade','44-45':'44-45:Retail Trade','48-49':'48-49:Transportation & Warehousing','51':'51:Information',
    '52':'52:Finance & Insurance','53':'53:Real Estate, Rental & Leasing','54':'54:Profess, Science & Tech Srvs',
    '55':'55:Management Srvs','56':'56:Admin Support Srvs','61':'61:Educational Srvs','62':'62:Healthcare & Social Assistance',
    '71':'71:Arts, Entertainment and Rec','72':'72:Accommodations & Food Srvs','81':'81:Other Services',
    '92':'92:Public Admin','99':'99:Unclassified'}

def lookup_naics2(naics2):return lookup.get(naics2,'00:Unknown')

def timer(f):
    def wrapper(*args, **kwargs):
        st = time.time()
        result=f(*args, **kwargs)
        et = time.time()
        T = (et-st)/60
        print(f"Exec Time: {T:.2f} min")
        return result
    return(wrapper)
    
def fips2name(state_code):
    try:
        return us.states.lookup(state_code.zfill(2)).name
    except AttributeError:
        return state_code
        
def dupeID(M):
    B = M.sort_values(by=['BLS_ID','WAGE'], ascending=[True,False])
    B = B.drop_duplicates(subset=['BLS_ID'],keep='first')
    return(B)
    
def Fetch_WR_QTR(query: str, params: dict, conn) -> pl.DataFrame:
    try:
        with conn.cursor() as cursor:
            cursor.execute(query, params)
            rows = cursor.fetchall()
            columns = [col[0] for col in cursor.description]
            df = pl.DataFrame(rows, schema=columns)
            df = df.with_columns(pl.col("STATE_CODE").cast(pl.Utf8))
            df = df.with_columns( pl.col('STATE_CODE').map_elements( lambda code: fips2name(code), return_dtype=pl.Utf8 ).alias('state'))
            df = df.with_columns((pl.col('YR').cast(pl.Utf8) + "-" + pl.col('QTR').cast(pl.Utf8)).alias('yr_qtr'))
            df = df.drop(["STATEUSE", "HOURLYRATE","JOBTITLE","SOCCODE","WEEKS","HOURS","EIN","STATE_CODE"]) 
            return df.to_pandas()
    except oracledb.Error as e:
        print("WTF?", e)
        return pl.DataFrame().to_pandas()

def Fetch_DOM_QTR(year,qtr,fips):
    dnaicsloc = "/wagerec/current_dominantnaics/parquet/"
    table = ds.dataset(dnaicsloc, format="parquet")
    DOM1 = pl.scan_pyarrow_dataset(table)
    f = fips.lstrip('0')
    DOM2 = (DOM1.filter(pl.col('fips') == f).filter(pl.col('year') == year).filter(pl.col('qtr') == qtr))
    Final = DOM2.select(['ui_acct','fips','naics2','naics3','naics4','naics6','run']).collect().to_pandas()
    Final.rename(columns={'ui_acct': 'UI'},inplace=True)
    Final.rename(columns={'run': 'RUN'},inplace=True)
    return(Final) 


@timer
def Extract_QTR(fips,year,quarter):
    query = """ SELECT * FROM YQQ WHERE state_code = :fips AND YR = :year AND qtr = :quarter"""
    params = {'fips':fips,'year':year, 'quarter':quarter}
    conn = oracledb.connect(user=open('USER.txt').read(),password=open('password.txt').read(),dsn="XQQQ")
    WR = Fetch_WR_QTR(query,params,conn)
    D = Fetch_DOM_QTR(year,quarter,fips)
    D['UI'] = D['UI'].str.zfill(10)
    WR1 = WR[WR['WAGE'] != 0]
    WR2 = dupeID(WR1)
    df = pd.merge(WR2, D, how='left',on=['UI','RUN'], indicator=True)
    df1  = dupeID(df)
    q2 = df1.shape[0]
    df1['yr_qtr'] = df1['YR'].astype(str) + "-" + df1['QTR'].astype(str)
    df1['state'] = [fips2name(code) for code in df1['fips']]
    df1['sector'] = [lookup_naics2(code) for code in df1['naics2']]
    df_subset = df1.groupby(['yr_qtr', 'state','sector']).agg(counts=('BLS_ID', 'count'),mean_wage=('WAGE', 'mean'),median_wage=('WAGE', 'median'),
                           percentile75 =('WAGE', lambda x: x.quantile(0.75)),percentile25 =('WAGE', lambda x: x.quantile(0.25))).reset_index()
    print(f"{q2} unique IDS found in {fips2name(fips)} @{year} Q{quarter}")
    return(df1,df_subset)
