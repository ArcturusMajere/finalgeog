import os
import pandas as pd
import numpy as np

def wage_table(df, id_col="ID", wage_col="WAGE", naics_col="NAICS2"):
    if naics_col not in df.columns:
        raise ValueError("naics_col not found")
    if df[naics_col].dtype.kind in "iufc":
        df = df.copy()
        df["NAICS2"] = df[naics_col].astype("Int64")
    else:
        df = df.copy()
        df["NAICS2"] = df[naics_col].astype(str).str.extract(r"(\d{2})", expand=False)

    bins = [0, 2500, 6250, 12500, 18750, 25000, 50000, 125000, 250000, np.inf]
    labels = ["1-2499","2500-6249","6250-12499","12500-18749","18750-24999","25000-49999","50000-124999","125000-249999","250000+"]

    df[wage_col] = pd.to_numeric(df[wage_col], errors="coerce")
    df["wage_class"] = pd.cut(df[wage_col], bins=bins, labels=labels, right=True, include_lowest=False)

    g = df.groupby([ "NAICS2", "wage_class"]).agg(total_wages=(wage_col,"sum"), id_count=(id_col,"nunique"))

    out = (g.unstack("wage_class")
             .reindex(columns=pd.MultiIndex.from_product([["total_wages","id_count"], labels]))
             .fillna(0)
             .reset_index())

    out.columns = ["NAICS2"] + [f"{wc}__{metric}" for metric, wc in out.columns if wc]

    paired = []
    for wc in labels:
        for metric in ["id_count", "total_wages"]:
            c = f"{wc}__{metric}"
            if c in out.columns:
                paired.append(c)

    totals = df.groupby("NAICS2").agg(all_total_wages=(wage_col,"sum"), all_id_count=(id_col,"nunique")).reset_index()
    out = totals.merge(out, on="NAICS2", how="left")
    out = out[["NAICS2", "all_total_wages", "all_id_count"] + paired]
    return out

def build_master_wage_table(root_dir, id_col="ID", wage_col="WAGE", naics_col="NAICS2"):
    frames = []
    for dirpath, _, filenames in os.walk(root_dir):
        for f in filenames:
            if not f.lower().endswith(".csv"):
                continue
            fp = os.path.join(dirpath, f)
            try:
                df = pd.read_csv(fp)
            except Exception:
                continue
            base = os.path.splitext(f)[0]
            parts = base.split("_")
            if len(parts) >= 2 and parts[-2].isdigit() and parts[-1].isdigit():
                yr_qtr = f"{parts[-2]}Q{parts[-1]}"
            else:
                yr_qtr = base
            tbl = wage_table(df, id_col=id_col, wage_col=wage_col, naics_col=naics_col)
            tbl.insert(0, "yr_qtr", yr_qtr)
            frames.append(tbl)
    if not frames:
        cols = ["yr_qtr","NAICS2","all_total_wages","all_id_count",
                "1-2499__id_count","1-2499__total_wages",
                "2500-6249__id_count","2500-6249__total_wages",
                "6250-12499__id_count","6250-12499__total_wages",
                "12500-18749__id_count","12500-18749__total_wages",
                "18750-24999__id_count","18750-24999__total_wages",
                "25000-49999__id_count","25000-49999__total_wages",
                "50000-124999__id_count","50000-124999__total_wages",
                "125000-249999__id_count","125000-249999__total_wages",
                "250000+__id_count","250000+__total_wages"]
        return pd.DataFrame(columns=cols)
    master = pd.concat(frames, ignore_index=True)
    return master



import pandas as pd
import plotly.express as px

def viz_wage_counts(master: pd.DataFrame, view="bubble"):
    df = master.copy()
    if view == "bubble":
        df["avg_wage"] = df["all_total_wages"] / df["all_id_count"].replace(0, pd.NA)
        fig = px.scatter(
            df,
            x="avg_wage",
            y="all_id_count",
            size="all_total_wages",
            color="NAICS2",
            animation_frame="yr_qtr",
            hover_data=["NAICS2","yr_qtr","all_total_wages","all_id_count"],
            size_max=60,
            labels={"avg_wage":"Average wage","all_id_count":"ID count","all_total_wages":"Total wages"}
        )
        fig.show()
        return fig
    if view == "stacked_counts":
        fig = px.bar(
            df,
            x="yr_qtr",
            y="all_id_count",
            color="NAICS2",
            barmode="stack",
            labels={"yr_qtr":"Quarter","all_id_count":"ID count"}
        )
        fig.show()
        return fig
    if view == "stacked_wages":
        fig = px.bar(
            df,
            x="yr_qtr",
            y="all_total_wages",
            color="NAICS2",
            barmode="stack",
            labels={"yr_qtr":"Quarter","all_total_wages":"Total wages"}
        )
        fig.show()
        return fig
    if view == "heatmap_counts":
        p = df.pivot(index="NAICS2", columns="yr_qtr", values="all_id_count").fillna(0)
        fig = px.imshow(
            p,
            labels=dict(x="Quarter", y="NAICS2", color="ID count"),
            aspect="auto"
        )
        fig.show()
        return fig
    if view == "heatmap_wages":
        p = df.pivot(index="NAICS2", columns="yr_qtr", values="all_total_wages").fillna(0)
        fig = px.imshow(
            p,
            labels=dict(x="Quarter", y="NAICS2", color="Total wages"),
            aspect="auto"
        )
        fig.show()
        return fig
    raise ValueError("view must be one of: 'bubble','stacked_counts','stacked_wages','heatmap_counts','heatmap_wages'")


viz_wage_counts(master, view="bubble")
viz_wage_counts(master, view="stacked_counts")
viz_wage_counts(master, view="stacked_wages")
viz_wage_counts(master, view="heatmap_counts")
viz_wage_counts(master, view="heatmap_wages")

