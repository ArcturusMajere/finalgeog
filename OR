import pandas as pd
import matplotlib.pyplot as plt

def plot_normalized_over_time(stats_df, value_col="missing_pct"):
    # 1) Turn "2020-1" into a datetime (first day of quarter)
    df = stats_df.copy()
    year_qtr = df['yr_qtr'].str.split('-', expand=True).astype(int)
    df['date'] = pd.to_datetime(dict(
        year=year_qtr[0],
        month=(year_qtr[1]-1)*3 + 1,
        day=1
    ))

    # 2) Pivot so we have dates × states
    pivot = df.pivot(index='date', columns='state', values=value_col)

    # 3) Min–max normalize each state's series
    norm = (pivot - pivot.min()) / (pivot.max() - pivot.min())

    # 4) Plot
    fig, ax = plt.subplots(figsize=(14, 8))
    for state in norm.columns:
        ax.plot(norm.index, norm[state], label=state)
    ax.set_title(f"Normalized {value_col} by State Over Time")
    ax.set_xlabel("Date")
    ax.set_ylabel(f"{value_col} (0–1 normalized)")
    ax.legend(bbox_to_anchor=(1.02, 1), loc="upper left", fontsize="small", ncol=2)
    plt.tight_layout()
    plt.show()
plot_normalized_over_time(stats_df, value_col="missing_pct")


import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from IPython.display import HTML

def animate_snake_lines(stats_df, value_col="missing_pct"):
    """
    Animate state-wise lines 'snaking' over time.
    
    Parameters:
    - stats_df: DataFrame with ['state','yr_qtr',value_col]
    - value_col: column to animate (e.g., 'missing_pct' or 'dupes_pct')
    
    Returns:
    - HTML object embedding the animation.
    """
    # 1) Convert yr_qtr to datetime
    df = stats_df.copy()
    yq = df['yr_qtr'].str.split('-', expand=True).astype(int)
    df['date'] = pd.to_datetime(dict(
        year=yq[0],
        month=(yq[1] - 1) * 3 + 1,
        day=1
    ))
    
    # 2) Pivot and normalize
    pivot = df.pivot(index='date', columns='state', values=value_col)
    norm = (pivot - pivot.min()) / (pivot.max() - pivot.min())
    
    # 3) Prepare animation
    dates = norm.index.sort_values()
    states = norm.columns.tolist()
    
    fig, ax = plt.subplots(figsize=(14, 8))
    lines = {state: ax.plot([], [], lw=2, label=state)[0] for state in states}
    
    ax.set_xlim(dates.min(), dates.max())
    ax.set_ylim(0, 1)
    ax.set_title(f"Animated {value_col} by State Over Time")
    ax.set_xlabel("Date")
    ax.set_ylabel(f"{value_col} (0–1)")
    ax.legend(bbox_to_anchor=(1.02, 1), loc="upper left", fontsize="small", ncol=2)
    
    def init():
        for line in lines.values():
            line.set_data([], [])
        return list(lines.values())
    
    def update(frame):
        date = dates[frame]
        for state in states:
            x = dates[:frame+1]
            y = norm.loc[:date, state]
            lines[state].set_data(x, y)
        return list(lines.values())
    
    anim = FuncAnimation(
        fig,
        update,
        frames=len(dates),
        init_func=init,
        blit=True,
        interval=300,
        repeat=True
    )
    
    return HTML(anim.to_jshtml())

# Usage (in JupyterLab):
# anim = animate_snake_lines(stats_df, value_col="missing_pct")
# anim

anim = animate_snake_lines(stats_df, value_col="missing_pct")
anim




# 1) Generate anim
anim = animate_snake_lines(stats_df, value_col="missing_pct")

# 2) Convert to HTML
html_string = anim.to_jshtml()

# 3) Save out
with open("snake_animation.html", "w") as f:
    f.write(html_string)

