import pandas as pd

def compute_summary_tables(df_cohort):
    """
    Given df_cohort (with columns ['state','yr_qtr','sector','original_class','current_class','count']),
    returns two DataFrames:
      - top20_6244:   Top 20 states by total count for sector '6244'
      - low_high_diff: For original_class='low' & current_class='high',
                       the increase = count(2024-3) – count(2020-1), per state
    """
    # 1) Top 20 attractors for sector '6244'
    df_6244 = df_cohort[df_cohort['sector'] == '6244']
    top20_6244 = (
        df_6244
        .groupby('state')['count']
        .sum()
        .nlargest(20)
        .reset_index(name='total_6244_cohort')
    )

    # 2) Low→High transition diff (2024-3 minus 2020-1)
    df_low_high = df_cohort[
        (df_cohort['original_class'] == 'low') &
        (df_cohort['current_class'] == 'high')
    ]
    # counts at first and last quarter
    first = (
        df_low_high[df_low_high['yr_qtr'] == '2020-1']
        .groupby('state')['count']
        .sum()
        .rename('count_2020_1')
    )
    last = (
        df_low_high[df_low_high['yr_qtr'] == '2024-3']
        .groupby('state')['count']
        .sum()
        .rename('count_2024_3')
    )
    diff = (
        pd.concat([first, last], axis=1)
          .fillna(0)
          .assign(
              increase=lambda d: d['count_2024_3'] - d['count_2020_1']
          )
          .reset_index()
    )
    low_high_diff = diff.sort_values('increase', ascending=False)

    return top20_6244, low_high_diff

# — example usage — (after you've done your df_cohort prep)
top20_6244, low_high_diff = compute_summary_tables(df_cohort)

print("=== Top 20 Sector 6244 Attractor States ===")
print(top20_6244.to_string(index=False))

print("\n=== States by Low→High Transition Increase ===")
print(low_high_diff.head(10).to_string(index=False))

# And if you want to save them:
top20_6244.to_csv("top20_6244_attractors.csv", index=False)
low_high_diff.to_csv("low_high_transition_diff.csv", index=False)
