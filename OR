import pandas as pd

def calculate_naics_mismatches_by_year(df):
    df = df.copy()

    # Convert all NAICS columns to string and pad as needed
    df['naics3'] = df['naics3'].astype(str).str.zfill(3)
    df['naics4'] = df['naics4'].astype(str).str.zfill(4)
    df['naics5'] = df['naics5'].astype(str).str.zfill(5)
    df['naics6'] = df['naics6'].astype(str).str.zfill(6)

    # Parse NAICS2 ranges
    def parse_naics2_range(val):
        try:
            if '-' in val:
                start, end = map(int, val.split('-'))
                return {str(i).zfill(2) for i in range(start, end + 1)}
            else:
                return {val.zfill(2)}
        except:
            return set()

    df['naics2_set'] = df['naics2'].astype(str).apply(parse_naics2_range)

    # Check mismatches
    df['mismatch_naics3'] = ~df.apply(lambda x: x['naics3'][:2] in x['naics2_set'], axis=1)
    df['mismatch_naics4'] = ~df.apply(lambda x: x['naics4'][:2] in x['naics2_set'], axis=1)
    df['mismatch_naics5'] = ~df.apply(lambda x: x['naics5'][:2] in x['naics2_set'], axis=1)
    df['mismatch_naics6'] = ~df.apply(lambda x: x['naics6'][:2] in x['naics2_set'], axis=1)

    # Group by year and calculate mismatch percentages
    summary = df.groupby('year').agg(
        total=('naics2', 'count'),
        naics3_mismatch_pct=('mismatch_naics3', 'mean'),
        naics4_mismatch_pct=('mismatch_naics4', 'mean'),
        naics5_mismatch_pct=('mismatch_naics5', 'mean'),
        naics6_mismatch_pct=('mismatch_naics6', 'mean')
    ).reset_index()

    for col in ['naics3_mismatch_pct', 'naics4_mismatch_pct', 'naics5_mismatch_pct', 'naics6_mismatch_pct']:
        summary[col] = (summary[col] * 100).round(2)

    return summary
summary_by_year = calculate_naics_mismatches_by_year(df)
print(summary_by_year)
