import pandas as pd
def compute_summary_stats_pivot(xlsx_path):
    xls=pd.ExcelFile(xlsx_path)
    df=pd.concat([pd.read_excel(xls,sheet_name=sh).assign(state=sh) for sh in xls.sheet_names],ignore_index=True)
    keys=df[df['yr_qtr']=='2020-1'][['state','sector','original_class']].drop_duplicates()
    dfc=df.merge(keys,on=['state','sector','original_class'],how='inner')
    state_totals=dfc.groupby(['state','yr_qtr'],as_index=False)['count'].sum().rename(columns={'count':'state_total'}).pivot(index='state',columns='yr_qtr',values='state_total').reset_index()
    sector_totals=df.groupby(['sector','yr_qtr'],as_index=False)['count'].sum().rename(columns={'count':'sector_total'}).pivot(index='sector',columns='yr_qtr',values='sector_total').reset_index()
    d4=dfc[dfc['sector']=='6244'].groupby(['state','yr_qtr'],as_index=False)['count'].sum()
    orig4=d4[d4['yr_qtr']=='2020-1'][['state','count']].rename(columns={'count':'orig_6244'})
    sector_6244_counts=d4.merge(orig4,on='state').pivot(index='state',columns='yr_qtr',values='count').reset_index()
    sector_6244_change=d4.merge(orig4,on='state').assign(change=lambda d:d['count']-d['orig_6244']).pivot(index='state',columns='yr_qtr',values='change').reset_index()
    orig_tot=dfc[dfc['yr_qtr']=='2020-1'].groupby('state',as_index=False)['count'].sum().rename(columns={'count':'orig_total'})
    cohort_tot=dfc.groupby(['state','yr_qtr'],as_index=False)['count'].sum().rename(columns={'count':'cohort_total'})
    unfound=cohort_tot.merge(orig_tot,on='state').assign(unfound=lambda d:d['orig_total']-d['cohort_total']).pivot(index='state',columns='yr_qtr',values='unfound').reset_index()
    return{'state_totals':state_totals,'sector_totals':sector_totals,'sector_6244_counts':sector_6244_counts,'sector_6244_change':sector_6244_change,'unfound':unfound}
if __name__=='__main__':
    sums=compute_summary_stats_pivot("cohort_tracking.xlsx")
    with pd.ExcelWriter("summary_stats_pivot.xlsx",engine="xlsxwriter") as w:
        for k,df in sums.items():df.to_excel(w,sheet_name=k,index=False)

def compute_summary_stats_pivot(xlsx_path):
    xls=pd.ExcelFile(xlsx_path)
    df=pd.concat([pd.read_excel(xls,sheet_name=sh).assign(state=sh) for sh in xls.sheet_names],ignore_index=True)
    keys=df[df['yr_qtr']=='2020-1'][['state','sector','original_class']].drop_duplicates()
    dfc=df.merge(keys,on=['state','sector','original_class'],how='inner')
    st=dfc.groupby(['state','yr_qtr'],as_index=False)['count'].sum().rename(columns={'count':'state_total'})
    sg=dfc.groupby(['sector','yr_qtr'],as_index=False)['count'].sum().rename(columns={'count':'sector_total'})
    d4=dfc[dfc['sector']=='6244'].groupby(['state','yr_qtr'],as_index=False)['count'].sum()
    o4=d4[d4['yr_qtr']=='2020-1'][['state','count']].rename(columns={'count':'orig_6244'})
    s4=d4.merge(o4,on='state').assign(change=lambda d:d['count']-d['orig_6244'])
    ot=dfc[dfc['yr_qtr']=='2020-1'].groupby('state',as_index=False)['count'].sum().rename(columns={'count':'orig_total'})
    ct=dfc.groupby(['state','yr_qtr'],as_index=False)['count'].sum().rename(columns={'count':'cohort_total'})
    uf=ct.merge(ot,on='state').assign(unfound=lambda d:d['orig_total']-d['cohort_total'])
    return {
        'state_totals':st.pivot(index='state',columns='yr_qtr',values='state_total').reset_index(),
        'sector_totals':sg.pivot(index='sector',columns='yr_qtr',values='sector_total').reset_index(),
        'sector_6244_counts':d4.pivot(index='state',columns='yr_qtr',values='count').reset_index(),
        'sector_6244_change':s4.pivot(index='state',columns='yr_qtr',values='change').reset_index(),
        'unfound':uf.pivot(index='state',columns='yr_qtr',values='unfound').reset_index()
    }

if __name__=='__main__':
    sums=compute_summary_stats_pivot("cohort_tracking.xlsx")
    with pd.ExcelWriter("summary_stats_pivot.xlsx",engine="xlsxwriter") as w:
        for name,df in sums.items():
            df.to_excel(w,sheet_name=name,index=False)


import pandas as pd

def compute_summary_stats(xlsx_path: str):
    """
    Reads an Excel workbook with sheets named by state abbrev, each having
    columns [yr_qtr, state, sector, original_class, current_class, count].
    Filters to the 2020-1 cohort, then computes:
    
      1) state_totals:   total count per state & yr_qtr
      2) sector_totals:  total count per sector & yr_qtr
      3) sector_6244_changes:
            - count of sector '6244' per state & yr_qtr
            - change = count – orig_6244 (where orig_6244 is its 2020-1 count)
      4) unfound:
            - orig_total = total cohort count in 2020-1 per state
            - cohort_total = cohort count per state & yr_qtr
            - unfound = orig_total – cohort_total
    
    Returns
    -------
    dict of DataFrames:
      {
        'state_totals': pd.DataFrame,
        'sector_totals': pd.DataFrame,
        'sector_6244_changes': pd.DataFrame,
        'unfound': pd.DataFrame
      }
    """
    # 1) load & stack all sheets, tagging each row with sheet_name
    xls = pd.ExcelFile(xlsx_path)
    df = pd.concat(
        [pd.read_excel(xls, sheet_name=sh).assign(state=sh)
         for sh in xls.sheet_names],
        ignore_index=True
    )

    # 2) identify the 2020-1 cohort keys and filter to just that cohort
    cohort_keys = (
        df[df['yr_qtr']=='2020-1']
        .loc[:, ['state','sector','original_class']]
        .drop_duplicates()
    )
    df_cohort = df.merge(cohort_keys, on=['state','sector','original_class'], how='inner')

    # 3) state_totals
    state_totals = (
        df_cohort
        .groupby(['state','yr_qtr'], as_index=False)['count']
        .sum()
        .rename(columns={'count':'state_total'})
    )

    # 4) sector_totals
    sector_totals = (
        df_cohort
        .groupby(['sector','yr_qtr'], as_index=False)['count']
        .sum()
        .rename(columns={'count':'sector_total'})
    )

    # 5) sector_6244_changes
    df_6244 = df_cohort[df_cohort['sector']=='6244']
    sec = (
        df_6244
        .groupby(['state','yr_qtr'], as_index=False)['count']
        .sum()
    )
    # original 6244 counts per state at 2020-1
    orig_6244 = (
        sec[sec['yr_qtr']=='2020-1']
        .loc[:, ['state','count']]
        .rename(columns={'count':'orig_6244'})
    )
    sector_6244_changes = (
        sec
        .merge(orig_6244, on='state')
        .assign(change = lambda d: d['count'] - d['orig_6244'])
    )

    # 6) unfound: how many from the original cohort are NOT found in each quarter
    # 6a) original cohort total per state (all sectors & classes) at 2020-1
    orig_tot = (
        df_cohort[df_cohort['yr_qtr']=='2020-1']
        .groupby('state', as_index=False)['count']
        .sum()
        .rename(columns={'count':'orig_total'})
    )
    # 6b) cohort total per state & quarter
    cohort_tot = (
        df_cohort
        .groupby(['state','yr_qtr'], as_index=False)['count']
        .sum()
        .rename(columns={'count':'cohort_total'})
    )
    # 6c) merge and compute unfound
    unfound = (
        cohort_tot
        .merge(orig_tot, on='state')
        .assign(unfound=lambda d: d['orig_total'] - d['cohort_total'])
    )

    return {
        'state_totals': state_totals,
        'sector_totals': sector_totals,
        'sector_6244_changes': sector_6244_changes,
        'unfound': unfound
    }

# — example usage —
if __name__ == "__main__":
    summaries = compute_summary_stats("cohort_tracking.xlsx")
    for name, df in summaries.items():
        print(f"\n===== {name} =====")
        print(df.head().to_string(index=False))
