import pandas as pd
import numpy as np
from concurrent.futures import ThreadPoolExecutor, as_completed
import plotly.express as px
from pathlib import Path

def wage_table(df, id_col="ID", wage_col="WAGE", sector_col="sector"):
    if sector_col not in df.columns:
        raise ValueError("sector_col not found")
    df = df.copy()
    bins = [0, 2500, 6250, 12500, 18750, 25000, 50000, 125000, 250000, np.inf]
    labels = ["1-2499","2500-6249","6250-12499","12500-18749","18750-24999","25000-49999","50000-124999","125000-249999","250000+"]
    df[wage_col] = pd.to_numeric(df[wage_col], errors="coerce")
    df["wage_class"] = pd.cut(df[wage_col], bins=bins, labels=labels, right=True, include_lowest=False)
    g = df.groupby([sector_col,"wage_class"]).agg(total_wages=(wage_col,"sum"), id_count=(id_col,"nunique"))
    out = (g.unstack("wage_class")
             .reindex(columns=pd.MultiIndex.from_product([["total_wages","id_count"], labels]))
             .fillna(0)
             .reset_index())
    out.columns = [sector_col] + [f"{wc}__{metric}" for metric, wc in out.columns if wc]
    paired = []
    for wc in labels:
        for metric in ["id_count", "total_wages"]:
            c = f"{wc}__{metric}"
            if c in out.columns:
                paired.append(c)
    totals = df.groupby(sector_col).agg(all_total_wages=(wage_col,"sum"), all_id_count=(id_col,"nunique")).reset_index()
    out = totals.merge(out, on=sector_col, how="left")
    out = out[[sector_col,"all_total_wages","all_id_count"] + paired]
    return out

def build_master_wage_table_parallel(id_col="ID", wage_col="WAGE", sector_col="sector", years=range(2022, 2025), quarters=(1,2,3,4), max_workers=8):
    tasks = [(y, q) for y in years for q in quarters]
    results = []
    with ThreadPoolExecutor(max_workers=max_workers) as ex:
        future_map = {ex.submit(Getcohort, y, q): (y, q) for y, q in tasks}
        for fut in as_completed(future_map):
            y, q = future_map[fut]
            try:
                df = fut.result()
                if df is None or len(df) == 0:
                    continue
                tbl = wage_table(df, id_col=id_col, wage_col=wage_col, sector_col=sector_col)
                tbl.insert(0, "yr_qtr", f"{y}Q{q}")
                results.append(tbl)
            except Exception:
                continue
    if not results:
        cols = ["yr_qtr", sector_col, "all_total_wages", "all_id_count",
                "1-2499__id_count","1-2499__total_wages","2500-6249__id_count","2500-6249__total_wages",
                "6250-12499__id_count","6250-12499__total_wages","12500-18749__id_count","12500-18749__total_wages",
                "18750-24999__id_count","18750-24999__total_wages","25000-49999__id_count","25000-49999__total_wages",
                "50000-124999__id_count","50000-124999__total_wages","125000-249999__id_count","125000-249999__total_wages",
                "250000+__id_count","250000+__total_wages"]
        return pd.DataFrame(columns=cols)
    return pd.concat(results, ignore_index=True)

def plot_wage_viz(master: pd.DataFrame, view="bubble", value="all_id_count", sector=None, save_html=None):
    df = master.copy()
    if view == "bubble":
        df["avg_wage"] = df["all_total_wages"] / df["all_id_count"].replace(0, pd.NA)
        fig = px.scatter(df, x="avg_wage", y="all_id_count", size="all_total_wages",
                         color="sector", animation_frame="yr_qtr",
                         hover_data=["sector","yr_qtr","all_total_wages","all_id_count"],
                         size_max=60, labels={"avg_wage":"Average wage","all_id_count":"ID count","all_total_wages":"Total wages"},
                         title="Avg Wage vs ID Count (size = Total Wages)")
    elif view == "stacked":
        if value not in {"all_id_count","all_total_wages"}:
            raise ValueError
        fig = px.bar(df, x="yr_qtr", y=value, color="sector", barmode="stack",
                     labels={"yr_qtr":"Quarter", value:value.replace("_"," ").title()},
                     title=f"Stacked: {value.replace('_',' ').title()} by Sector per Quarter")
    elif view == "heatmap":
        if value not in {"all_id_count","all_total_wages"}:
            raise ValueError
        p = df.pivot(index="sector", columns="yr_qtr", values=value).fillna(0)
        fig = px.imshow(p, labels=dict(x="Quarter", y="Sector", color=value.replace("_"," ").title()),
                        aspect="auto", title=f"Heatmap: {value.replace('_',' ').title()} (Sector × Quarter)")
    elif view == "band_shares":
        if sector is None:
            raise ValueError
        d = df[df["sector"] == sector].copy()
        bin_cols = [c for c in d.columns if c.endswith("__id_count")]
        d["id_total"] = d["all_id_count"].replace(0, pd.NA)
        for c in bin_cols:
            d[c.replace("__id_count","__id_share")] = d[c] / d["id_total"]
        share_cols = [c for c in d.columns if c.endswith("__id_share")]
        long = d.melt(id_vars=["yr_qtr"], value_vars=share_cols, var_name="band", value_name="share")
        long["band"] = long["band"].str.replace("__id_share","", regex=False)
        fig = px.line(long.sort_values("yr_qtr"), x="yr_qtr", y="share", color="band",
                      labels={"share":"Share of employees","yr_qtr":"Quarter","band":"Wage band"},
                      title=f"Wage Band Shares Over Time — Sector {sector}")
    else:
        raise ValueError
    if save_html:
        fig.write_html(save_html, include_plotlyjs="cdn", full_html=True)
    return fig

def run_wage_pipeline(years=range(2022, 2025), quarters=(1,2,3,4), id_col="ID", wage_col="WAGE", sector_col="sector", max_workers=8, out_dir="wage_outputs", sector_for_band_shares=None, save_master=True, prefix="wage"):
    Path(out_dir).mkdir(parents=True, exist_ok=True)
    master = build_master_wage_table_parallel(id_col=id_col, wage_col=wage_col, sector_col=sector_col, years=years, quarters=quarters, max_workers=max_workers)
    if len(master) == 0:
        return {"master": master, "figs": {}}
    if save_master:
        master.to_parquet(str(Path(out_dir) / f"{prefix}_master.parquet"), index=False)
        master.to_csv(str(Path(out_dir) / f"{prefix}_master.csv"), index=False)
    figs = {}
    figs["bubble"] = plot_wage_viz(master, view="bubble", save_html=str(Path(out_dir) / f"{prefix}_bubble.html"))
    figs["stacked_ids"] = plot_wage_viz(master, view="stacked", value="all_id_count", save_html=str(Path(out_dir) / f"{prefix}_stacked_id_count.html"))
    figs["stacked_wages"] = plot_wage_viz(master, view="stacked", value="all_total_wages", save_html=str(Path(out_dir) / f"{prefix}_stacked_total_wages.html"))
    figs["heatmap_ids"] = plot_wage_viz(master, view="heatmap", value="all_id_count", save_html=str(Path(out_dir) / f"{prefix}_heatmap_id_count.html"))
    figs["heatmap_wages"] = plot_wage_viz(master, view="heatmap", value="all_total_wages", save_html=str(Path(out_dir) / f"{prefix}_heatmap_total_wages.html"))
    pick = sector_for_band_shares
    if pick is None and "sector" in master.columns:
        s = master["sector"].dropna()
        if len(s) > 0:
            pick = s.iloc[0]
    if pick is not None:
        figs["band_shares"] = plot_wage_viz(master, view="band_shares", sector=pick, save_html=str(Path(out_dir) / f"{prefix}_band_shares_{pick}.html"))
    return {"master": master, "figs": figs}

# example usage:
# results = run_wage_pipeline(years=range(2022, 2025), quarters=[1,2,3,4], max_workers=8, out_dir="wage_outputs", sector_for_band_shares=None, prefix="wage_sector")
# master_df = results["master"]
