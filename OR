
import warnings; warnings.filterwarnings('ignore')
import us, polars as pl, time, pyarrow.dataset as ds, oracledb, re

states = ['AL','AR','CT','FL','GA','IA','IL','IN','ID','KS','LA','MD','ME','MN','MT','NE','NJ','NM','OH','OK','OR','PA','RI','SC','SD','WA','WI','WV','WY','TX','UT']
lookup = {'11':'11:Agriculture','21':'21:Mining','22':'22:Utilities','23':'23:Construction','31-33':'31-33:Manufacturing','42':'42:Wholesale Trade','44-45':'44-45:Retail Trade','48-49':'48-49:Transportation & Warehousing','51':'51:Information','52':'52:Finance & Insurance','53':'53:Real Estate, Rental & Leasing','54':'54:Profess, Science & Tech Srvs','55':'55:Management Srvs','56':'56:Admin Support Srvs','61':'61:Educational Srvs','62':'62:Healthcare & Social Assistance','71':'71:Arts, Entertainment and Rec','72':'72:Accommodations & Food Srvs','81':'81:Other Services','92':'92:Public Admin','99':'99:Unclassified'}

def lookup_naics2(x): return lookup.get(x,'00:Unknown')

def fips2name(code):
    try: return us.states.lookup(code.zfill(2)).name
    except: return code

def timer(f):
    def wrapper(*a, **k):
        t=time.time(); r=f(*a,**k); print(f"Exec Time: {(time.time()-t)/60:.2f} min"); return r
    return wrapper

_pool = oracledb.create_pool(user=open('USER.txt').read().strip(), password=open('password.txt').read().strip(), dsn="XQQQ", min=1, max=8, increment=1, homogeneous=True, threaded=True)

def _infer_naics_col(v):
    if isinstance(v, (list, tuple, set)): v = next(iter(v))
    s = str(v)
    if re.fullmatch(r'\d{2}-\d{2}', s): return 'naics2'
    d = re.sub(r'\D', '', s)
    if len(d) == 2: return 'naics2'
    if len(d) == 3: return 'naics3'
    if len(d) == 4: return 'naics4'
    return 'naics6'

def Fetch_WR_QTR(fips, year, quarter) -> pl.DataFrame:
    q = """
    SELECT BLS_ID, UI, RUN, WAGE, YR, QTR, STATE_CODE
    FROM (
      SELECT BLS_ID, UI, RUN, WAGE, YR, QTR, STATE_CODE,
             ROW_NUMBER() OVER (PARTITION BY BLS_ID ORDER BY WAGE DESC) rn
      FROM YQQ
      WHERE STATE_CODE = :fips AND YR = :year AND QTR = :qtr AND WAGE <> 0
    )
    WHERE rn = 1
    """
    with _pool.acquire() as conn:
        with conn.cursor() as cur:
            cur.arraysize = 100000
            cur.execute(q, {'fips': fips, 'year': year, 'qtr': quarter})
            rows = cur.fetchall()
            cols = [c[0] for c in cur.description]
    df = pl.DataFrame(rows, schema=cols)
    return df.with_columns([
        pl.col("STATE_CODE").cast(pl.Utf8),
        (pl.col("YR").cast(pl.Utf8) + "-" + pl.col("QTR").cast(pl.Utf8)).alias("yr_qtr")
    ])

def Fetch_DOM_QTR(year, qtr, fips, naics=None, naics_col=None) -> pl.DataFrame:
    ds1 = ds.dataset("/wagerec/current_dominantnaics/parquet/", format="parquet")
    lz = pl.scan_pyarrow_dataset(ds1).filter(
        (pl.col("fips") == fips.lstrip("0")) & (pl.col("year") == year) & (pl.col("qtr") == qtr)
    )
    if naics is not None:
        col = naics_col or _infer_naics_col(naics)
        if isinstance(naics, (list, tuple, set)):
            vals = [str(x) for x in naics]
            lz = lz.filter(pl.col(col).cast(pl.Utf8).is_in(vals))
        else:
            lz = lz.filter(pl.col(col).cast(pl.Utf8) == str(naics))
    lz = lz.select(["ui_acct","fips","naics2","naics3","naics4","naics6","run"])
    return lz.collect().rename({"ui_acct":"UI","run":"RUN"}).with_columns(pl.col("UI").cast(pl.Utf8).str.zfill(10))

@timer
def Extract_QTR(fips, year, quarter, naics=None, naics_col=None):
    WR = Fetch_WR_QTR(fips, year, quarter)
    D = Fetch_DOM_QTR(year, quarter, fips, naics=naics, naics_col=naics_col)
    df = WR.join(D, on=["UI","RUN"], how="left")
    df1 = df.unique(subset=["BLS_ID"], keep="first")
    q2 = df1.height
    df1 = df1.with_columns([
        pl.col("STATE_CODE").map_elements(fips2name, return_dtype=pl.Utf8).alias("state"),
        pl.col("naics2").cast(pl.Utf8).map_elements(lookup_naics2, return_dtype=pl.Utf8).alias("sector")
    ])
    df_subset = (
        df1.group_by(["yr_qtr","state","sector"])
           .agg([
               pl.len().alias("counts"),
               pl.col("WAGE").mean().alias("mean_wage"),
               pl.col("WAGE").median().alias("median_wage"),
               pl.col("WAGE").quantile(0.75, "nearest").alias("percentile75"),
               pl.col("WAGE").quantile(0.25, "nearest").alias("percentile25")
           ])
           .sort(["yr_qtr","state","sector"])
    )
    print(f"{q2} unique IDS found in {fips2name(fips)} @{year} Q{quarter}")
    return df1.to_pandas(), df_subset.to_pandas()


Examples
Extract_QTR("16", 2024, 2, naics="62")
Extract_QTR("16", 2024, 2, naics="541", naics_col="naics3")
Extract_QTR("16", 2024, 2, naics=["31-33","42"])
Extract_QTR("16", 2024, 2, naics=["6231","6214"], naics_col="naics4")



import warnings; warnings.filterwarnings('ignore')
import re, time, us, polars as pl, pyarrow.dataset as ds, oracledb

lookup = {'11':'11:Agriculture','21':'21:Mining','22':'22:Utilities','23':'23:Construction','31-33':'31-33:Manufacturing','42':'42:Wholesale Trade','44-45':'44-45:Retail Trade','48-49':'48-49:Transportation & Warehousing','51':'51:Information','52':'52:Finance & Insurance','53':'53:Real Estate, Rental & Leasing','54':'54:Profess, Science & Tech Srvs','55':'55:Management Srvs','56':'56:Admin Support Srvs','61':'61:Educational Srvs','62':'62:Healthcare & Social Assistance','71':'71:Arts, Entertainment and Rec','72':'72:Accommodations & Food Srvs','81':'81:Other Services','92':'92:Public Admin','99':'99:Unclassified'}

def lookup_naics2(x):
    if x is None: return '00:Unknown'
    return lookup.get(str(x),'00:Unknown')

def fips2name(code):
    try: return us.states.lookup(str(code).zfill(2)).name
    except: return str(code)

def _state_to_fips_codes(state):
    s = str(state).strip()
    if s.isdigit():
        f2 = s.zfill(2)
    else:
        st = us.states.lookup(s)
        if st is None: raise ValueError(f"Unrecognized state: {state}")
        f2 = st.fips
    return f2, f2.lstrip('0'), fips2name(f2)

def timer(f):
    def wrapper(*a, **k):
        t=time.time(); r=f(*a,**k); print(f"Exec Time: {(time.time()-t)/60:.2f} min"); return r
    return wrapper

_pool = oracledb.create_pool(user=open('USER.txt').read().strip(), password=open('password.txt').read().strip(), dsn="XQQQ", min=1, max=8, increment=1, homogeneous=True, threaded=True)

def _infer_naics_col(v):
    if isinstance(v, (list, tuple, set)): v = next(iter(v))
    s = str(v)
    if re.fullmatch(r'\d{2}-\d{2}', s): return 'naics2'
    d = re.sub(r'\D', '', s)
    if len(d) == 2: return 'naics2'
    if len(d) == 3: return 'naics3'
    if len(d) == 4: return 'naics4'
    return 'naics6'

def Fetch_WR_QTR(fips2, year, quarter) -> pl.DataFrame:
    q = """
    SELECT BLS_ID, UI, RUN, WAGE, YR, QTR, STATE_CODE
    FROM (
      SELECT BLS_ID, UI, RUN, WAGE, YR, QTR, STATE_CODE,
             ROW_NUMBER() OVER (PARTITION BY BLS_ID ORDER BY WAGE DESC) rn
      FROM YQQ
      WHERE STATE_CODE = :fips AND YR = :year AND QTR = :qtr AND WAGE <> 0
    )
    WHERE rn = 1
    """
    with _pool.acquire() as conn:
        with conn.cursor() as cur:
            cur.arraysize = 100000
            cur.execute(q, {'fips': fips2, 'year': year, 'qtr': quarter})
            rows = cur.fetchall(); cols = [c[0] for c in cur.description]
    return pl.DataFrame(rows, schema=cols).with_columns((pl.col("YR").cast(pl.Utf8) + "-" + pl.col("QTR").cast(pl.Utf8)).alias("yr_qtr"))

def Fetch_DOM_QTR(year, qtr, fips2, naics=None, naics_col=None) -> pl.DataFrame:
    ds1 = ds.dataset("/wagerec/current_dominantnaics/parquet/", format="parquet")
    lz = pl.scan_pyarrow_dataset(ds1).filter(
        (pl.col("fips") == fips2.lstrip("0")) & (pl.col("year") == year) & (pl.col("qtr") == qtr)
    )
    if naics is not None:
        col = naics_col or _infer_naics_col(naics)
        if isinstance(naics, (list, tuple, set)):
            vals = [str(x) for x in naics]
            lz = lz.filter(pl.col(col).cast(pl.Utf8).is_in(vals))
        else:
            lz = lz.filter(pl.col(col).cast(pl.Utf8) == str(naics))
    return lz.select(["ui_acct","fips","naics2","naics3","naics4","naics6","run"]).collect().rename({"ui_acct":"UI","run":"RUN"}).with_columns(pl.col("UI").cast(pl.Utf8).str.zfill(10))

@timer
def Extract_QTR(state, year, quarter, naics=None, naics_col=None):
    fips2, fips_no0, state_name = _state_to_fips_codes(state)
    WR = Fetch_WR_QTR(fips2, year, quarter)
    D = Fetch_DOM_QTR(year, quarter, fips2, naics=naics, naics_col=naics_col)
    df = WR.join(D, on=["UI","RUN"], how="left")
    df1 = df.unique(subset=["BLS_ID"], keep="first").with_columns([
        pl.col("STATE_CODE").cast(pl.Utf8),
        pl.col("STATE_CODE").map_elements(fips2name, return_dtype=pl.Utf8).alias("state"),
        pl.col("naics2").cast(pl.Utf8).map_elements(lookup_naics2, return_dtype=pl.Utf8).alias("sector")
    ])
    q2 = df1.height
    df_subset = (
        df1.group_by(["yr_qtr","state","sector"])
           .agg([
               pl.len().alias("counts"),
               pl.col("WAGE").mean().alias("mean_wage"),
               pl.col("WAGE").median().alias("median_wage"),
               pl.col("WAGE").quantile(0.75, "nearest").alias("percentile75"),
               pl.col("WAGE").quantile(0.25, "nearest").alias("percentile25")
           ])
           .sort(["yr_qtr","state","sector"])
    )
    print(f"{q2} unique IDS found in {state_name} @{year} Q{quarter}")
    return df1.to_pandas(), df_subset.to_pandas()

Examples:
Extract_QTR("ID", 2024, 2)
Extract_QTR("Idaho", 2024, 2, naics="62")
Extract_QTR("16", 2024, 2, naics=["31-33","42"])
