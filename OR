import os, re
import pandas as pd
import numpy as np

OUTPUT_COLS = [
    "yr_qtr","NAICS2","all_total_wages","all_id_count",
    "1-2499__id_count","1-2499__total_wages",
    "2500-6249__id_count","2500-6249__total_wages",
    "6250-12499__id_count","6250-12499__total_wages",
    "12500-18749__id_count","12500-18749__total_wages",
    "18750-24999__id_count","18750-24999__total_wages",
    "25000-49999__id_count","25000-49999__total_wages",
    "50000-124999__id_count","50000-124999__total_wages",
    "125000-249999__id_count","125000-249999__total_wages",
    "250000+__id_count","250000+__total_wages"
]

INPUT_COLS = [c for c in OUTPUT_COLS if c != "yr_qtr"]

NUMERIC_COLS = [
    "all_total_wages","all_id_count",
    "1-2499__id_count","1-2499__total_wages",
    "2500-6249__id_count","2500-6249__total_wages",
    "6250-12499__id_count","6250-12499__total_wages",
    "12500-18749__id_count","12500-18749__total_wages",
    "18750-24999__id_count","18750-24999__total_wages",
    "25000-49999__id_count","25000-49999__total_wages",
    "50000-124999__id_count","50000-124999__total_wages",
    "125000-249999__id_count","125000-249999__total_wages",
    "250000+__id_count","250000+__total_wages"
]

def _parse_yr_qtr_from_filename(fname: str):
    m = re.search(r'_(\d{4})_([1-4])(?:\.\w+)?$', fname)
    if not m:
        return None
    return f"{m.group(1)}Q{m.group(2)}"

def build_master_from_csvs_filename_yrqtr(root_dir, coerce_types=True, dedupe=True, sort_rows=True):
    frames = []
    for dirpath, _, files in os.walk(root_dir):
        for f in files:
            if not f.lower().endswith(".csv"):
                continue
            yr_qtr = _parse_yr_qtr_from_filename(f)
            if yr_qtr is None:
                continue
            fp = os.path.join(dirpath, f)
            try:
                df = pd.read_csv(fp)
            except Exception:
                continue
            missing = [c for c in INPUT_COLS if c not in df.columns]
            if missing:
                continue
            df = df[INPUT_COLS].copy()
            df.insert(0, "yr_qtr", yr_qtr)
            if coerce_types:
                df["yr_qtr"] = df["yr_qtr"].astype(str)
                df["NAICS2"] = df["NAICS2"].astype(str).str.extract(r"(\d{2})", expand=False)
                for c in NUMERIC_COLS:
                    df[c] = pd.to_numeric(df[c], errors="coerce").fillna(0)
            frames.append(df)

    if not frames:
        return pd.DataFrame(columns=OUTPUT_COLS)

    out = pd.concat(frames, ignore_index=True)
    if dedupe:
        out = out.drop_duplicates(subset=OUTPUT_COLS)

    if sort_rows:
        def k(s):
            m = re.match(r"^\s*(\d{4})Q([1-4])\s*$", str(s))
            return (int(m.group(1)), int(m.group(2))) if m else (0, 0)
        out["__y"], out["__q"] = zip(*out["yr_qtr"].map(k))
        out = out.sort_values(["__y","__q","NAICS2"]).drop(columns=["__y","__q"])

    return out.reset_index(drop=True)
master = build_master_from_csvs_filename_yrqtr("path/to/csvs")
master.head()
