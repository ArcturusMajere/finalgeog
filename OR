# dashboard_summary.py

from shiny import App, ui, reactive
from shiny.ui import page_fluid, layout_sidebar, panel_sidebar, panel_main
from shiny import render_table
import pandas as pd

# ——————————————————————————————
# 1) LOAD & PREP DATA
# ——————————————————————————————
xlsx_path = "cohort_tracking.xlsx"
xls = pd.ExcelFile(xlsx_path)
df = pd.concat(
    [pd.read_excel(xls, sheet_name=sh).assign(state=sh) for sh in xls.sheet_names],
    ignore_index=True
)

# Identify the 2020-1 cohort
init = (
    df[df["yr_qtr"] == "2020-1"]
      .loc[:, ["state","sector","original_class"]]
      .drop_duplicates()
)
df_cohort = df.merge(init, on=["state","sector","original_class"], how="inner")

# Helper for quarterly diffs pivot
def quarterly_diffs(df, sector=None, original_class=None, current_class=None):
    d = df.copy()
    if sector:         d = d[d["sector"] == sector]
    if original_class:d = d[d["original_class"] == original_class]
    if current_class:  d = d[d["current_class"] == current_class]
    agg = (
        d.groupby(["state","yr_qtr"])["count"]
         .sum().reset_index(name="total")
         .sort_values(["state","yr_qtr"])
    )
    agg["prev"] = agg.groupby("state")["total"].shift(1).fillna(0)
    agg["diff"] = agg["total"] - agg["prev"]
    return agg.pivot(index="state", columns="yr_qtr", values="diff").reset_index()

# Available choices
sectors = sorted(df_cohort["sector"].unique())
classes = sorted(df_cohort["original_class"].unique())

# ——————————————————————————————
# 2) UI
# ——————————————————————————————
app_ui = page_fluid(
    ui.h2("Cohort Summary Dashboard"),
    layout_sidebar(
        panel_sidebar(
            ui.input_select(
                "summary_type", "Summary Type:",
                choices=[
                    "Top Attractor States",
                    "Class Transition Diff",
                    "Quarterly Diffs Pivot"
                ],
                selected="Top Attractor States"
            ),
            ui.input_select("sector", "Sector:", choices=sectors, selected=sectors[0]),
            ui.input_slider("top_n", "Top N States:", min=1, max=50, value=20, step=1),
            ui.input_select("orig_class", "Original Class:", choices=classes, selected=classes[0]),
            ui.input_select("curr_class", "Current Class:", choices=classes, selected=classes[-1]),
        ),
        panel_main(
            ui.output_table("summary_table")
        )
    )
)

# ——————————————————————————————
# 3) SERVER
# ——————————————————————————————
def server(input, output, session):

    @reactive.Calc
    def summary_df():
        dfc = df_cohort

        if input.summary_type() == "Top Attractor States":
            # sum counts by state for chosen sector
            df_s = (
                dfc[dfc["sector"] == input.sector()]
                .groupby("state")["count"]
                .sum()
                .nlargest(input.top_n())
                .reset_index(name="total_count")
            )
            return df_s

        elif input.summary_type() == "Class Transition Diff":
            # diff between last and first quarter for chosen classes
            filt = dfc[
                (dfc["original_class"] == input.orig_class()) &
                (dfc["current_class"] == input.curr_class())
            ]
            first = (
                filt[filt["yr_qtr"] == filt["yr_qtr"].min()]
                .groupby("state")["count"]
                .sum()
                .rename("count_start")
            )
            last = (
                filt[filt["yr_qtr"] == filt["yr_qtr"].max()]
                .groupby("state")["count"]
                .sum()
                .rename("count_end")
            )
            df_diff = (
                pd.concat([first, last], axis=1)
                  .fillna(0)
                  .assign(diff=lambda d: d["count_end"] - d["count_start"])
                  .reset_index()
            )
            return df_diff

        else:  # Quarterly Diffs Pivot
            return quarterly_diffs(
                dfc,
                sector=input.sector(),
                original_class=input.orig_class(),
                current_class=input.curr_class()
            )

    @output
    @render_table
    def summary_table():
        return summary_df()

# ——————————————————————————————
# 4) RUN
# ——————————————————————————————
app = App(app_ui, server)
