import oracledb
import pandas as pd
from concurrent.futures import ThreadPoolExecutor, as_completed

def find_high_freq_ids_oracle(
    user: str,
    password: str,
    dsn: str,
    table: str,
    id_col: str = "ID",
    yr_qtr_col: str = "yr_qtr",
    min_count: int = 15,
    start_year: int = 2020,
    end_year: int = 2024,
    output_csv: str = "high_freq_ids.csv",
    max_workers: int = 4,
):
    quarters = [f"{year}Q{q}" for year in range(start_year, end_year + 1) for q in range(1, 5)]
    def _worker(yr_qtr: str) -> pd.DataFrame:
        conn = oracledb.connect(user=user, password=password, dsn=dsn)
        sql = f"""
            SELECT
                :yr_qtr AS {yr_qtr_col},
                {id_col} AS id,
                COUNT(*) AS count
            FROM {table}
            WHERE {yr_qtr_col} = :yr_qtr
            GROUP BY {id_col}
            HAVING COUNT(*) >= :min_count
        """
        cur = conn.cursor()
        cur.execute(sql, {"yr_qtr": yr_qtr, "min_count": min_count})
        rows = cur.fetchall()
        cur.close()
        conn.close()
        return pd.DataFrame(rows, columns=[yr_qtr_col, "id", "count"])
    dfs = []
    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        futures = {executor.submit(_worker, q): q for q in quarters}
        for fut in as_completed(futures):
            q = futures[fut]
            try:
                dfs.append(fut.result())
            except Exception as e:
                print(f"⚠️ Failed for {q}: {e}")
    out = pd.concat(dfs, ignore_index=True) if dfs else pd.DataFrame(columns=[yr_qtr_col, "id", "count"])
    out.to_csv(output_csv, index=False)
    return out

if __name__ == "__main__":
    df = find_high_freq_ids_oracle(
        user="MY_USER",
        password="MY_PASS",
        dsn="db.host.com:1521/ORCLPDB1",
        table="YOUR_TABLE",
        id_col="ID",
        yr_qtr_col="YR_QTR",
        min_count=15,
        start_year=2020,
        end_year=2024,
        output_csv="high_freq_ids.csv",
        max_workers=8,
    )
    print(df.head())
