import pandas as pd

def wage_share_by_naics_level(df):
    levels = ['naics2','naics3','naics4','naics5','naics6']
    total = df['WAGE'].sum()
    return pd.DataFrame([
        {
            'level': lvl,
            'wage_share': df.loc[df[lvl].notna(), 'WAGE'].sum() / total * 100 if total else 0
        }
        for lvl in levels
    ])


import pandas as pd
from concurrent.futures import ThreadPoolExecutor, as_completed

def wage_share_by_naics_level(df):
    levels = ['naics2','naics3','naics4','naics5','naics6']
    total = df['WAGE'].sum()
    return pd.DataFrame([{'level': lvl, 'wage_share': df.loc[df[lvl].notna(), 'WAGE'].sum()/total*100 if total else 0} for lvl in levels])

def threaded_wage_share(STATES, start_year=2020, end_year=2024, quarters=(1,2,3,4), max_workers=8):
    results = []
    def worker(state, year, qtr):
        df = get_cohort(state, year, qtr)
        if df is None or df.empty: return
        ws = wage_share_by_naics_level(df)
        ws['state'], ws['year'], ws['qtr'] = state, year, qtr
        results.append(ws)
    with ThreadPoolExecutor(max_workers=max_workers) as exe:
        futures = [exe.submit(worker, s, y, q) for s in STATES for y in range(start_year, end_year+1) for q in quarters]
        for f in as_completed(futures): f.result()
    return pd.concat(results, ignore_index=True) if results else pd.DataFrame()
