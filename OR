from concurrent.futures import ThreadPoolExecutor
import pandas as pd

def count_naics2_nans_over_cohorts(df):
    # List all quarters from 2020Q1 through 2024Q3
    quarters = pd.period_range('2020Q1', '2024Q3', freq='Q').astype(str).tolist()
    # List unique states in your dataset
    states = df['state'].unique().tolist()
    
    def proc(state, yr_qtr):
        # Parse year and quarter from the string 'YYYYQn'
        year_str, q_str = yr_qtr.split('Q')
        year, quarter = int(year_str), int(q_str)
        # Use your existing function to get the cohort slice
        cohort_df = get_cohort(state, year, quarter)
        # Count NaNs in naics2
        nan_count = cohort_df['naics2'].isna().sum()
        return {
            'state': state,
            'yr_qtr': yr_qtr,
            'naics2_nan_count': nan_count
        }
    
    # Prepare all (state, quarter) combinations
    tasks = [(s, q) for s in states for q in quarters]
    
    # Execute in parallel
    with ThreadPoolExecutor() as executor:
        results = list(executor.map(lambda args: proc(*args), tasks))
    
    # Build summary DataFrame
    summary_df = pd.DataFrame(results)
    return summary_df

# Example usage:
# summary = count_naics2_nans_over_cohorts(your_dataframe)
# print(summary)
