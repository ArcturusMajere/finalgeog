import pandas as pd

def expand_naics2(df):
    """Expand naics2 ranges to list of valid values per row."""
    naics2_expanded = df['naics2'].astype(str).str.zfill(2).str.extract(r'(?P<start>\d{2})(?:-(?P<end>\d{2}))?')
    naics2_expanded = naics2_expanded.fillna(method='ffill', axis=1).astype(int)
    df['naics2_set'] = naics2_expanded.apply(lambda row: set(str(i).zfill(2) for i in range(row['start'], row['end'] + 1)), axis=1)
    return df

def compute_mismatch_columns(df):
    """Compute mismatch columns for all NAICS levels."""
    for level in [3, 4, 5, 6]:
        col = f'naics{level}'
        df[col] = df[col].astype(str).str.zfill(level)
        mismatch_col = f'mismatch_naics{level}'
        df[mismatch_col] = ~df[col].str[:2].isin(df['naics2_set'])
    return df

def summarize_mismatches(df):
    """Group by state and yr_qtr, and compute mismatch percentages."""
    mismatch_cols = [f'mismatch_naics{n}' for n in [3, 4, 5, 6]]

    summary = (
        df.groupby(['state', 'yr_qtr'])[mismatch_cols]
        .mean()
        .mul(100)
        .round(2)
        .reset_index()
    )
    summary['total'] = df.groupby(['state', 'yr_qtr']).size().values
    return summary

def calculate_naics_mismatches(df):
    df = df.copy()
    df = expand_naics2(df)
    df = compute_mismatch_columns(df)
    result = summarize_mismatches(df)
    return result

# === Execution ===
# Replace this with your actual DataFrame load
# Example: df = pd.read_csv('your_data.csv')
# df must include: ['state', 'yr_qtr', 'naics2', 'naics3', 'naics4', 'naics5', 'naics6']

# Sample usage
if __name__ == "__main__":
    # Example dummy data (replace with your actual data)
    df = pd.DataFrame({
        'state': ['NM', 'NM', 'AZ', 'AZ'],
        'yr_qtr': ['2020-1', '2020-1', '2021-2', '2021-2'],
        'naics2': ['31-33', '42', '44-45', '72'],
        'naics3': ['311', '423', '451', '721'],
        'naics4': ['3111', '4231', '4511', '7211'],
        'naics5': ['31111', '42311', '45111', '72111'],
        'naics6': ['311111', '423111', '451111', '721111']
    })

    result_df = calculate_naics_mismatches(df)
    print(result_df)
