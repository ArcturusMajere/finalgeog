import pandas as pd
import json
from pathlib import Path

def excel_to_explorer_html(xlsx_path, output_html, max_rows=5000, top_n=20, title="CSV Workbook Explorer"):
    wb = pd.read_excel(xlsx_path, sheet_name=None)
    pkg = {}
    for sheet, df in wb.items():
        df = df.copy()
        if len(df) > max_rows:
            df = df.head(max_rows)
        # Light dtype hints
        num_cols = df.select_dtypes(include="number").columns.tolist()
        cat_cols = df.select_dtypes(include=["object","category","bool"]).columns.tolist()
        # Convert to JSON-friendly
        data = json.loads(df.to_json(orient="records"))
        pkg[sheet] = {
            "rows": len(df),
            "cols": df.shape[1],
            "columns": df.columns.tolist(),
            "numeric_cols": num_cols,
            "categorical_cols": cat_cols,
            "data": data
        }

    html = f"""<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8"/>
<title>{title}</title>
<script src="https://cdn.plot.ly/plotly-2.35.2.min.js"></script>
<style>
body{{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Arial,sans-serif;margin:20px}}
#wrap{{max-width:1200px;margin:0 auto}}
#top{{display:flex;gap:12px;flex-wrap:wrap;align-items:flex-end;margin-bottom:14px}}
label{{font-size:12px;color:#444}}
select{{min-width:220px;padding:6px}}
.badges{{display:flex;gap:10px;margin:8px 0 16px}}
.badge{{background:#f3f4f6;border:1px solid #e5e7eb;border-radius:999px;padding:6px 10px;font-size:12px}}
#grid{{overflow:auto;border:1px solid #e5e7eb;border-radius:8px;max-height:360px}}
table{{border-collapse:separate;border-spacing:0;width:100%}}
th,td{{padding:6px 10px;border-bottom:1px solid #eee;white-space:nowrap}}
th{{position:sticky;top:0;background:#fafafa;z-index:1}}
#plots{{display:grid;grid-template-columns:1fr 1fr;gap:16px;margin-top:16px}}
@media (max-width:900px){{#plots{{grid-template-columns:1fr}}}}
</style>
</head>
<body>
<div id="wrap">
  <h2 style="margin:0 0 12px">{title}</h2>
  <div id="top">
    <div>
      <label>Sheet</label><br/>
      <select id="sheet"></select>
    </div>
    <div>
      <label>Numeric column (histogram)</label><br/>
      <select id="num"></select>
    </div>
    <div>
      <label>Categorical column (top {top_n} bar)</label><br/>
      <select id="cat"></select>
    </div>
  </div>
  <div class="badges">
    <div class="badge" id="meta-rows"></div>
    <div class="badge" id="meta-cols"></div>
  </div>
  <div id="grid"></div>
  <div id="plots">
    <div id="hist"></div>
    <div id="bar"></div>
  </div>
</div>

<script>
const PKG = {json.dumps(pkg)};
const TOP_N = {top_n};

function el(id){{return document.getElementById(id);}}

function setOptions(sel, items){{
  sel.innerHTML = items.map(v => `<option value="${{v}}">${{v}}</option>`).join("");
}}

function renderTable(rows, columns){{
  if(!rows || rows.length===0){{el("grid").innerHTML="<div style='padding:10px;color:#666'>No data</div>";return;}}
  const head = "<tr>"+columns.map(c=>`<th>${{c}}</th>`).join("")+"</tr>";
  const body = rows.map(r => "<tr>"+columns.map(c=>`<td>${{r[c]===undefined?"":r[c]}}</td>`).join("")+"</tr>").join("");
  el("grid").innerHTML = `<table><thead>${{head}}</thead><tbody>${{body}}</tbody></table>`;
}}

function histPlot(data, col){{
  if(!col){{Plotly.purge("hist"); return;}}
  const arr = data.map(d=>d[col]).filter(v => typeof v === "number" && !isNaN(v));
  if(arr.length===0){{Plotly.purge("hist"); return;}}
  Plotly.newPlot("hist", [{type:"histogram", x:arr}], {{
    margin:{{l:60,r:20,t:30,b:50}},
    xaxis:{{title:col}},
    yaxis:{{title:"Count"}},
    title:"Histogram"
  }});
}}

function barPlot(data, col){{
  if(!col){{Plotly.purge("bar"); return;}}
  const counts = new Map();
  for(const r of data){{
    const v = r[col];
    const key = (v===null||v===undefined) ? "(null)" : String(v);
    counts.set(key, (counts.get(key)||0)+1);
  }}
  let arr = Array.from(counts, ([k,v])=>({{k,v}}));
  arr.sort((a,b)=>b.v - a.v);
  arr = arr.slice(0, TOP_N);
  if(arr.length===0){{Plotly.purge("bar"); return;}}
  Plotly.newPlot("bar", [{type:"bar", x:arr.map(d=>d.k), y:arr.map(d=>d.v)}], {{
    margin:{{l:60,r:20,t:30,b:80}},
    xaxis:{{title:col, automargin:true}},
    yaxis:{{title:"Count"}},
    title:"Top "+TOP_N+" categories"
  }});
}}

function onSheetChange(){{
  const s = el("sheet").value;
  const obj = PKG[s];
  const cols = obj.columns;
  el("meta-rows").textContent = `Rows: ${{obj.rows}}`;
  el("meta-cols").textContent = `Columns: ${{obj.cols}}`;
  renderTable(obj.data, cols);
  setOptions(el("num"), obj.numeric_cols);
  setOptions(el("cat"), obj.categorical_cols);
  // pick defaults
  const nSel = el("num"); if(nSel.options.length>0) nSel.selectedIndex = 0;
  const cSel = el("cat"); if(cSel.options.length>0) cSel.selectedIndex = 0;
  histPlot(obj.data, nSel.value);
  barPlot(obj.data, cSel.value);
}}

function mount(){{
  const sheetNames = Object.keys(PKG);
  setOptions(el("sheet"), sheetNames);
  if(sheetNames.length>0) el("sheet").selectedIndex = 0;
  onSheetChange();
  el("sheet").onchange = onSheetChange;
  el("num").onchange = () => {{
    const s = el("sheet").value; histPlot(PKG[s].data, el("num").value);
  }};
  el("cat").onchange = () => {{
    const s = el("sheet").value; barPlot(PKG[s].data, el("cat").value);
  }};
}}

mount();
</script>
</body>
</html>"""
    Path(output_html).write_text(html, encoding="utf-8")
    return str(output_html)



# After csvs_to_excel(...) creates "combined.xlsx"
excel_to_explorer_html("combined.xlsx", "combined_explorer.html")
# Open combined_explorer.html in your browser
